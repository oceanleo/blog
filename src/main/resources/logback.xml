<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!--logback使用需要和slf4j一起使用，所以总共需要添加依赖的包有-->
    <!--slf4j-api.jar，logback-core.jar，logback-classic.jar，-->
    <!--logback-access.jar这个暂时用不到所以不添加依赖了-->


    <!--appender负责写日志的组件-->
    <!-- ConsoleAppender 控制台输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--日志格式化-->
            <pattern>%date [%thread] %-5level %logger{80} - %msg%n</pattern>
        </encoder>
    </appender>
    <!-- FileAppender 滚动输出 文件记录日志 -->
    <appender name="file—error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--过滤等级-->
            <level>INFO</level>
            <!--配置符合过滤条件的操作-->
            <onMatch>ACCEPT</onMatch>
            <!--配置不符合过滤条件的操作-->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--必要节点，包含文件名及%d转换符，%d可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。-->
            <FileNamePattern>logs/error.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <!--日志文件最大的大小 默认10M-->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
        <!--<MaxFileSize>10MB</MaxFileSize>-->
        <!--</triggeringPolicy>-->
        <encoder>
            <!--日志格式化-->
            <pattern>%date [%thread] %-5level %logger{80} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--logger:用来设置某一个包或具体的某一个类的日志打印级别、以及指定<appender>-->
    <!--name:指定受此loger约束的某一个包或者具体的某一个类。-->
    <logger name="java.sql.Connection" level="INFO"/>
    <!--level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。-->
    <logger name="java.sql.Statement" level="INFO"/>

    <logger name="com.ibatis" level="INFO"/>

    <logger name="com.ibatis.common.jdbc.SimpleDataSource" level="INFO"/>

    <logger name="com.ibatis.common.jdbc.ScriptRunner" level="INFO"/>

    <logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="INFO"/>

    <logger name="org.apache.commons.httpclient" level="INFO"/>

    <logger name="httpclient" level="INFO"/>

    <logger name="com.danga.MemCached" level="INFO"/>

    <logger name="net.rubyeye.xmemcached" level="INFO"/>

    <logger name="com.google.code.yanf4j" level="INFO"/>

    <logger name="org.springframework" level="INFO"/>

    <!--子节点<root>:它也是<loger>元素，但是它是根loger,是所有<loger>的上级。只有一个level属性，因为name已经被命名为"root",且已经是最上级了。-->
    <root level="DEBUG">
        <appender-ref ref="console"/>
        <appender-ref ref="file—error"/>
    </root>

</configuration>